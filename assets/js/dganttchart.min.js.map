{
  "version": 3,
  "sources": ["../src/lov/month.lov.ts", "../src/services/chart.ts", "../src/index.ts"],
  "sourcesContent": ["let monthLov : Array<string> = [];\nmonthLov[1] =  \"Jan\";\nmonthLov[2] =  \"Feb\";\nmonthLov[3] =  \"Mar\";\nmonthLov[4] =  \"Apr\";\nmonthLov[5] =  \"May\";\nmonthLov[6] =  \"Jun\";\nmonthLov[7] =  \"Jul\";\nmonthLov[8] =  \"Aug\";\nmonthLov[9] =  \"Sep\";\nmonthLov[10] =  \"Oct\";\nmonthLov[11] =  \"Nov\";\nmonthLov[12] =  \"Dec\";\n\nexport { monthLov }", "import { IGanttItem, ISeparator } from \"./../interface/dganttchart.interface\";\nimport { monthLov } from \"./../lov/month.lov\";\n\nclass Chart {\n\n    chartDivHTML : any = \"\";\n    highestDate : Date = new Date();\n    lowestDate : Date = new Date();\n    highestDateTime : number = 0;\n    lowestDateTime : number = 0;\n    monthDifferences : number = 0;\n    \n    // styling\n    monthSize = 50; // in pixel (px)\n    \n    Chart(chartDivName : string, ganttItem : Array<IGanttItem>, window : Window & typeof globalThis, separator? : Array<ISeparator>){\n        let chartDiv : HTMLElement = document.getElementById(chartDivName)!;\n        this.computeGanttLength(ganttItem);\n        this.monthDifferences = this.monthDiff(this.lowestDate, this.highestDate)+1;\n        // render\n        this.renderGantt(ganttItem, separator);\n        // apply to div\n        chartDiv.innerHTML = this.chartDivHTML;\n    }\n\n    renderGantt(ganttItem : Array<IGanttItem>, separator? : Array<ISeparator>){\n        let ganttHeaderMonth = \"\";\n        let startMonth = this.lowestDate.getMonth()+1;\n        let monthNowRendered = startMonth;\n        for(var i = 1; i<=(this.monthDifferences+6); i++){\n            ganttHeaderMonth += `\n                <div class=\"monthHeading\">\n                    <div class=\"vert\">\n                        <b> ${monthLov[monthNowRendered]} </b>\n                    </div>\n                </div>\n            `;\n            monthNowRendered++;\n            if(monthNowRendered == 13){\n                monthNowRendered = 1; // set back to jan\n            }\n        }\n        let ganttHeader = `\n        <div class=\"gantt-chart\">\n            <div class=\"gantt-chart-container\">\n               <div>\n                    <div class=\"gantt-chart-leftpane\">\n                        ${this.renderActivityList(ganttItem, separator)}\n                    </div>\n               </div>\n               <div>\n                    <div class=\"gantt-chart-header\">\n                        ${ganttHeaderMonth}\n                    </div>\n                    <div class=\"gantt-progress-bar\">\n                        ${this.renderProgressBar(ganttItem, separator)}\n                    </div>\n                </div>\n            </div>\n        </div>\n        `;\n        this.chartDivHTML += ganttHeader;\n    }\n\n    renderProgressBar(ganttItem : Array<IGanttItem>,  separator? : Array<ISeparator>){\n        let progressBar : string = ``;\n        let iterate = 0;\n        ganttItem.forEach((val,index) => {\n            if(typeof val !== undefined){\n                if(typeof separator !== \"undefined\"){\n                    const findNextseparator: any = (elem: any) => elem.index == iterate;\n                    let anySeparator = separator?.findIndex(findNextseparator);\n                    if(anySeparator !== -1){\n                        progressBar += ` <div class=\"progress-bar\"> &nbsp; </div>`;\n                    }\n                }\n                let multiplier = <number>new Date(<string>val.startDate).getFullYear() - <number>this.lowestDate.getFullYear()|| 0;\n                let length : number = this.monthDiff(new Date(<string>val.startDate), new Date(<string>val.endDate))+2;\n                progressBar += `\n                    <ul class=\"progress-bar\">    \n                             <li style=\"width: ${this.monthSize*length}px; margin-left: ${(multiplier*this.monthSize*12)+(new Date(<string>val.startDate).getMonth())*this.monthSize}px;\">\n                             <div class=\"period\"><b> ${length} </b> Months</div>\n                             </li>\n                             <li>\n                                <div class=\"period-info\">\n                                ${val.startDate} - ${val.endDate}\n                                </div>\n                             </li>\n                    </ul>\n                \n                `;\n                iterate++;\n            }\n        });\n        return progressBar;\n    }\n\n    renderActivityList(ganttItem : Array<IGanttItem>, separator? : Array<ISeparator>){\n        let activityList : string = ``;\n        activityList += `\n        <div class=\"activity-name\">\n            <div class=\"vert\">\n                <b>Activity Name</b>\n            </div>\n        </div>\n        `;\n\n\n        let iterate = 0;\n        ganttItem.forEach((val,index) => {\n            if(typeof separator !== \"undefined\"){\n                const findNextseparator: any = (elem: any) => elem.index == iterate;\n                let anySeparator = separator?.findIndex(findNextseparator);\n                if(anySeparator !== -1){\n    \n                    activityList += `\n                    <div class=\"activity-name\">\n                        <div class=\"separator\" style=\"width: ${((this.monthDifferences+6)*this.monthSize)+180};\">\n                            <div class=\"vert vert-left\">\n                                ${separator![anySeparator!].separatorName}\n                            </div>\n                        </div>\n                    </div>`;\n    \n                }\n            }\n  \n            if(typeof val.itemName !== undefined){\n                activityList += `\n                    <div class=\"activity-name\">\n                        <div class=\"vert\">\n                            ${val.itemName}\n                        </div>\n                    </div>\n                `;\n            }\n            iterate++;\n        });\n        return activityList;\n    }\n\n    computeGanttLength(ganttItem : Array<IGanttItem>){\n        ganttItem.forEach((val, index) => {\n            if(typeof val.endDate !== undefined){\n                let currentExaminedDateEnd: Date = new Date(<string>val.endDate);\n                this.getHighestDate(currentExaminedDateEnd);\n            }\n            if(typeof val.startDate !== undefined){\n                let currentExaminedDateStart: Date = new Date(<string>val.startDate);\n                this.getLowestDate(currentExaminedDateStart);\n            }\n        });\n    }\n\n    getHighestDate(input: Date){\n        let currentDateTimestamp = input.getTime();\n        if(currentDateTimestamp > this.highestDateTime){\n            this.highestDateTime = currentDateTimestamp;\n            this.highestDate = input;\n        }\n    }\n\n\n    getLowestDate(input: Date){\n        let currentDateTimestamp = input.getTime();\n        if(this.lowestDateTime == 0){\n            // set highest date\n            this.lowestDateTime = currentDateTimestamp;\n            this.lowestDate = input;\n        } else if(currentDateTimestamp < this.lowestDateTime){\n            // set lowest date\n            this.lowestDateTime = currentDateTimestamp;\n            this.lowestDate = input;\n        }\n    }\n    \n    monthDiff(d1 : Date, d2: Date) {\n        var months;\n        months = (d2.getFullYear() - d1.getFullYear()) * 12;\n        months -= d1.getMonth() + 1;\n        months += d2.getMonth();\n        return months <= 0 ? 0 : months;\n    }\n\n}\n\nconst chart = new Chart();\nexport { chart };\n", "import { chart } from \"./services/chart\";\nimport { IDGanttChart, IGanttItem, ISeparator } from \"./interface/dganttchart.interface\";\n\nexport class DGanttChart implements IDGanttChart  {\n    public constructor(chartName : string, ganttItem  : Array<IGanttItem>, separator? : Array<ISeparator> ){\n        // build chart\n        chart.Chart(chartName, ganttItem, window, separator);\n    }\n}\n\nexport {};\n\ndeclare global {\n    interface Window { DGanttChart: any; }\n}\n\nwindow.DGanttChart = DGanttChart;\n"],
  "mappings": "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",
  "names": ["monthLov", "Chart", "chartDivName", "ganttItem", "window", "separator", "chartDiv", "ganttHeaderMonth", "monthNowRendered", "i", "monthLov", "ganttHeader", "progressBar", "iterate", "val", "index", "findNextseparator", "elem", "multiplier", "length", "activityList", "anySeparator", "currentExaminedDateEnd", "currentExaminedDateStart", "input", "currentDateTimestamp", "d1", "d2", "months", "chart", "DGanttChart", "chartName", "ganttItem", "separator", "chart", "DGanttChart"]
}
